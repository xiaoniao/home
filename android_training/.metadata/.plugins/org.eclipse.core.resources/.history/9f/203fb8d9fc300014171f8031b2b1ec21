/*
 * Copyright (C) 2012 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.example.android.threadsample;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;

/**
 * 解析线程：这个线程解析ByteArray图片
 * 
 * 这个线程由PhotoTask管理和实例化,只要它实现了TaskRunnableDecodeMethods接口
 */
class PhotoDecodeRunnable implements Runnable {
    
	// 尝试解析图片次数
	private static final int    NUMBER_OF_DECODE_TRIES  = 2;

	// 暂停时间
	private static final long   SLEEP_TIME_MILLISECONDS = 250;

	// 状态码
	static final int            DECODE_STATE_FAILED     = -1;  // 解析失败
	static final int            DECODE_STATE_STARTED    = 0;   // 解析开始
	static final int            DECODE_STATE_COMPLETED  = 1;   // 解析完成

	// 接口实例
	final TaskRunnableDecodeMethods mPhotoTask;

	// 构造方法 通过接口和PhotoTask关联 相当于获得PhotoTask的引用
    PhotoDecodeRunnable(TaskRunnableDecodeMethods downloadTask) {
        mPhotoTask = downloadTask;
    }
    
	// 自定义解析接口
	interface TaskRunnableDecodeMethods {

		void   setImageDecodeThread(Thread currentThread);
		byte[] getByteBuffer(); // 下载和解析接口中都有这个接口，这就实现了下载接口和解析接口通过PhotoTask交互
		void   handleDecodeState(int state);
		int    getTargetWidth();
		int    getTargetHeight();
		void   setImage(Bitmap image);
	}

	@Override
	public void run() {

	    // 保存当前线程，以便PhotoTask可以停止线程
		mPhotoTask.setImageDecodeThread(Thread.currentThread());

		// 获得CacheBuffer
		byte[] imageBuffer = mPhotoTask.getByteBuffer();

		Bitmap returnBitmap = null;

		// 解析下载的图片
		try {
			
		    // 发送状态 开始解析
			mPhotoTask.handleDecodeState(DECODE_STATE_STARTED);

			BitmapFactory.Options bitmapOptions = new BitmapFactory.Options();

			int targetWidth = mPhotoTask.getTargetWidth();
			int targetHeight = mPhotoTask.getTargetHeight();

			if (Thread.interrupted()) {    // 检测线程是否被停止
				return;
			}

			bitmapOptions.inJustDecodeBounds = true;

			BitmapFactory.decodeByteArray(imageBuffer, 0, imageBuffer.length, bitmapOptions);

			int hScale = bitmapOptions.outHeight / targetHeight;
			int wScale = bitmapOptions.outWidth / targetWidth;

			int sampleSize = Math.max(hScale, wScale);

			if (sampleSize > 1) {
				bitmapOptions.inSampleSize = sampleSize;
			}

			if (Thread.interrupted()) {   // 检测线程是否被停止
				return;
			}

			bitmapOptions.inJustDecodeBounds = false;

			// 开始解析buffer，如果OOM会抛出异常，并再次解析
			for (int i = 0; i < NUMBER_OF_DECODE_TRIES; i++) {
				try {
					
				    returnBitmap = BitmapFactory.decodeByteArray(imageBuffer, 0, imageBuffer.length, bitmapOptions);
				
				} catch (Throwable e) {

					java.lang.System.gc();         // 回收内存，获得更多内存，注意，这个可能不管用

					if (Thread.interrupted()) {    // 检测线程是否被停止
						return;
					}
					
					// 线程休眠 250 ms
					try {
						Thread.sleep(SLEEP_TIME_MILLISECONDS);
					} catch (java.lang.InterruptedException interruptException) {
						return;
					}
				}
			}

		} finally {
		    
			if (null == returnBitmap) {               // 解析失败
				// 发送消息 解析失败
				mPhotoTask.handleDecodeState(DECODE_STATE_FAILED);
				
			} else {                                  // 解析成功
				mPhotoTask.setImage(returnBitmap);    // 设置显示图片

				// 发送消息 解析成功
				mPhotoTask.handleDecodeState(DECODE_STATE_COMPLETED);
			}

			// 设置当前线程为空，还起到释放内存的作用
			mPhotoTask.setImageDecodeThread(null);

			// 停止线程
			Thread.interrupted();
		}

	}
}
