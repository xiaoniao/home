package com.example.android.threadsample;

import java.net.URL;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;

import android.os.Handler;
import android.os.Looper;
import android.os.Message;
import android.support.v4.util.LruCache;

/**
 * 线程池，制定了线程池大小和缓存大小,如果想用这些代码，你需要重新配置这些属性，还有其他的属性
 * 这个类使用了两个线程池
 * 定义了一个Handler用于和UI交互
 */
public class PhotoManager {

	// 状态码
	static final int DOWNLOAD_FAILED   = -1;    // 下载失败
	static final int DOWNLOAD_STARTED  =  1;    // 下载开始
	static final int DOWNLOAD_COMPLETE =  2;    // 下载完成
	static final int DECODE_STARTED    =  3;    // 开始解析
	static final int TASK_COMPLETE     =  4;    // 任务完成

	// 缓存图片大小 4M
	private static final int              IMAGE_CACHE_SIZE = 1024 * 1024 * 4;
	// 等待空闲时间
	private static final int              KEEP_ALIVE_TIME = 1;
	// 设置单位
	private static final TimeUnit         KEEP_ALIVE_TIME_UNIT;
	
	// 线程池大小
	private static final int              CORE_POOL_SIZE = 8;
	// 最大线程池大小
	private static final int              MAXIMUM_POOL_SIZE = 8;
	// 可见的处理器数
	private static int                    NUMBER_OF_CORES = Runtime.getRuntime().availableProcessors();

	// Lru 缓存
	private final LruCache<URL, byte[]>   mPhotoCache;

	// 下载线程池 线程队列
	private final BlockingQueue<Runnable> mDownloadWorkQueue;
	// 解析线程池 线程队列
	private final BlockingQueue<Runnable> mDecodeWorkQueue;

	// PhotoTask 队列 用于操作下载和解析队列
	private final Queue<PhotoTask>        mPhotoTaskWorkQueue;

	// 下载线程池
	private final ThreadPoolExecutor      mDownloadThreadPool;
	// 解析线程池
	private final ThreadPoolExecutor      mDecodeThreadPool;

	// Handler和UI交互
	private Handler mHandler;

	// 单例PhotoManager实例
	private static PhotoManager sInstance = null;

	static {
		KEEP_ALIVE_TIME_UNIT = TimeUnit.SECONDS;  // 单位是秒
		sInstance = new PhotoManager();           // 实例化PhotoManager 单例
	}
	
	// 单例方式获得PhotoManager实例
    public static PhotoManager getInstance() {
        return sInstance;
    }


	// 构造方法， 实例化各种方法
	private PhotoManager() {
	    // 实例化队列
		mDownloadWorkQueue  = new LinkedBlockingQueue<Runnable>();
		mDecodeWorkQueue    = new LinkedBlockingQueue<Runnable>();
		mPhotoTaskWorkQueue = new LinkedBlockingQueue<PhotoTask>();
		
		// 实例化线程池
		mDownloadThreadPool = new ThreadPoolExecutor(CORE_POOL_SIZE, MAXIMUM_POOL_SIZE, KEEP_ALIVE_TIME, KEEP_ALIVE_TIME_UNIT, mDownloadWorkQueue);
		mDecodeThreadPool   = new ThreadPoolExecutor(NUMBER_OF_CORES, NUMBER_OF_CORES, KEEP_ALIVE_TIME, KEEP_ALIVE_TIME_UNIT, mDecodeWorkQueue);
		
		// 实例化LurCache
		mPhotoCache         = new LruCache<URL, byte[]>(IMAGE_CACHE_SIZE) {
		    
		    // This overrides the default sizeOf() implementation to return the correct size of each cache entry.
			@Override
			protected int sizeOf(URL paramURL, byte[] paramArrayOfByte) {
				return paramArrayOfByte.length;
			}
		};
		
		// 实例化Handler 用于向主线程发送Bitmap  ps.题外话 如果想通过广播的话这个就不需要了
		mHandler = new Handler(Looper.getMainLooper()) {

		    // 当Handler接收到一个消息执行
			@Override
			public void handleMessage(Message inputMessage) {

				// 从Message中获得所需东西
				PhotoTask photoTask = (PhotoTask) inputMessage.obj;

				// 从PhotoTask中获得PhotoView,通过弱引用
				PhotoView localView = photoTask.getPhotoView();

				if (localView != null) {

					// 从获得PhotoView中获得URL
					URL localURL = localView.getLocation();

					// 从PhotoTask中获得URL
					if (photoTask.getImageURL() == localURL)

						switch (inputMessage.what) {

						case DOWNLOAD_STARTED:  // 开始下载
							localView.setStatusResource(R.drawable.imagedownloading);
							break;

						case DOWNLOAD_COMPLETE: // 下载完成
							localView.setStatusResource(R.drawable.decodequeued);
							break;
							
						case DECODE_STARTED:   // 开始解析
							localView.setStatusResource(R.drawable.decodedecoding);
							break;
							
						case TASK_COMPLETE:    // 下载解析完成
							localView.setImageBitmap(photoTask.getImage()); // 从photoTask中获得图片
							recycleTask(photoTask);                         // 尝试重新使用photoTask
							break;
							
						case DOWNLOAD_FAILED:  // 下载失败
							localView.setStatusResource(R.drawable.imagedownloadfailed);
							recycleTask(photoTask);                         // 尝试重新使用photoTask
							break;
						default:
							// 否则直接使用父类
							super.handleMessage(inputMessage);              // 子类必须实现以便接收消息
						}
				}
			}
		};
	}

	/** 处理PhotoTask的状态 **/
	public void handleState(PhotoTask photoTask, int state) {
	    
		switch (state) {

		case TASK_COMPLETE:                    // 下载解析完成
		    
			if (photoTask.isCacheEnabled()) {  // 是否允许缓存
			    
			    // 把图片放进Lru缓存中
				mPhotoCache.put(photoTask.getImageURL(), photoTask.getByteBuffer());
			}

			// 向handler发送消息
			Message completeMessage = mHandler.obtainMessage(state, photoTask);
			completeMessage.sendToTarget();
			
			break;

		case DOWNLOAD_COMPLETE:               // 下载完毕
		    
		    // 从photoTask中获得解析Runnable, 加入到解析线程池中
			mDecodeThreadPool.execute(photoTask.getPhotoDecodeRunnable()); 

		default:
		    
		    // 其他的状态直接发送，而不再进行另外的操作，由handler处理
			mHandler.obtainMessage(state, photoTask).sendToTarget();
			break;
		}

	}

	/** 取消所有线程 **/
	public static void cancelAll() {

	    // 生成一个和下载队列大小一样的数组
		PhotoTask[] taskArray = new PhotoTask[sInstance.mDownloadWorkQueue.size()];

		// 把下载队列转换成数组
		sInstance.mDownloadWorkQueue.toArray(taskArray);

		// 下载数组大小
		int taskArraylen = taskArray.length;

		// 线程安全
		synchronized (sInstance) {

		    // 循环遍历
			for (int taskArrayIndex = 0; taskArrayIndex < taskArraylen; taskArrayIndex++) {

				// 获得当前正在运行的线程
				Thread thread = taskArray[taskArrayIndex].mThreadThis;

				if (null != thread) {    // 如果线程存在
					thread.interrupt();  // 停止线程
				}
			}
		}
	}

	/** 停止下载线程，并从线程池中移除 **/
	static public void removeDownload(PhotoTask downloaderTask, URL pictureURL) {

	    // 如果PhotoTask(线程?)仍然存在，并且它的下载URL和pictureURL一致
		if (downloaderTask != null && downloaderTask.getImageURL().equals(pictureURL)) {

			// 线程安全
			synchronized (sInstance) {

				// 获得正在运行的线程
				Thread thread = downloaderTask.getCurrentThread();

				if (null != thread) {    // 如果线程存在
					thread.interrupt();  // 停止线程
				}
			}
			
			// 从下载线程池中移除下载线程  (和上面的getCurrentThread有什么区别呢)
			sInstance.mDownloadThreadPool.remove(downloaderTask.getHTTPDownloadRunnable());
		}
	}

	/** 开始下载和解析 **/
	static public PhotoTask startDownload(PhotoView imageView, boolean cacheFlag) {

	    // 从PhotoTask队列顶部获得PhotoTask
		PhotoTask downloadTask = sInstance.mPhotoTaskWorkQueue.poll();

		// 如果PhotoTask为空，就直接实例化
		if (null == downloadTask) {
			downloadTask = new PhotoTask();           // 题外话：应该把url放在这里设置吗？因为如果是重复使用的话怎么算
		}

		// 初始化PhotoTask任务
		downloadTask.initializeDownloaderTask(PhotoManager.sInstance, imageView, cacheFlag); // 在这个例子里url是放在imageView中

		// 设置CacheBuffer , 通过LruCache获得大小
		downloadTask.setByteBuffer(sInstance.mPhotoCache.get(downloadTask.getImageURL()));

		// 如果ByteBuffer是空，说明图片没有缓存
		if (null == downloadTask.getByteBuffer()) {    // 图片没有缓存
		    
		    // 把下载线程添加进下载线程池中,开始执行线程下载
			sInstance.mDownloadThreadPool.execute(downloadTask.getHTTPDownloadRunnable());

			// 设置图片背景
			imageView.setStatusResource(R.drawable.imagequeued);

		} else {                                       // 图片已经缓存

		    // 向Handler发送状态图片已经下载完成
			sInstance.handleState(downloadTask, DOWNLOAD_COMPLETE);
		}

		return downloadTask;
	}

	/** 回收任务 **/
	void recycleTask(PhotoTask downloadTask) {
	    
		// 回收任务，执行task中的recycle方法
		downloadTask.recycle();

		// 插入队尾，以便重复利用
		mPhotoTaskWorkQueue.offer(downloadTask);
	}
}
