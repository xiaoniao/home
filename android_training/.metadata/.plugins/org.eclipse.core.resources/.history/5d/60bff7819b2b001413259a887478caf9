package com.google.samples.apps.iosched.util;

import android.app.*;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.net.wifi.WifiConfiguration;
import android.net.wifi.WifiManager;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.provider.Settings;
import android.text.Html;
import android.text.method.LinkMovementMethod;
import android.util.Log;
import android.widget.TextView;
import android.widget.Toast;

import com.google.samples.apps.iosched.BuildConfig;
import com.google.samples.apps.iosched.Config;
import com.google.samples.apps.iosched.R;

import java.util.List;

import static com.google.samples.apps.iosched.util.LogUtils.makeLogTag;

// Wifi 工具类
public class WiFiUtils {

    // Preference key and values associated with WiFi AP configuration.
    public static final String  PREF_WIFI_AP_CONFIG   = "pref_wifi_ap_config";

    public static final String  WIFI_CONFIG_DONE      = "done";                     // Wifi状态
    public static final String  WIFI_CONFIG_REQUESTED = "requested";                // Wifi状态

    private static final String TAG                   = makeLogTag(WiFiUtils.class);

    // 安装会议Wifi
    public static void installConferenceWiFi(final Context context) {

        // 创建一个Wifi配置
        WifiConfiguration config = new WifiConfiguration();

        // 必须添加双引号，告诉系统则是一个ASCII值
        config.SSID = String.format("\"%s\"", Config.WIFI_SSID);
        config.preSharedKey = String.format("\"%s\"", Config.WIFI_PASSPHRASE);

        // 获得Wifi管理类
        final WifiManager wifiManager = (WifiManager)context.getSystemService(Context.WIFI_SERVICE);

        // 保存Wifi配置
        int netId = wifiManager.addNetwork(config);

        if (netId != -1) {
            // 启动该Wifi
            wifiManager.enableNetwork(netId, false);
            boolean result = wifiManager.saveConfiguration();
            if (!result) {
                // 很抱歉，无法更新WiFi配置
                Log.e(TAG, "Unknown error while calling WiFiManager.saveConfiguration()");
                Toast.makeText(context, context.getResources().getString(R.string.wifi_install_error_message),
                        Toast.LENGTH_SHORT).show();
            }
        } else {
            // 很抱歉，无法更新WiFi配置
            Log.e(TAG, "Unknown error while calling WiFiManager.addNetwork()");
            Toast.makeText(context, context.getResources().getString(R.string.wifi_install_error_message),
                    Toast.LENGTH_SHORT).show();
        }
    }

    /**
     * Helper method to decide whether to bypass conference WiFi setup.
     * 
     * Return true if WiFi AP is already configured (WiFi adapter enabled) or WiFi configuration is complete as per
     * shared preference.
     */
    public static boolean shouldBypassWiFiSetup(final Context context) {

        final WifiManager wifiManager = (WifiManager)context.getSystemService(Context.WIFI_SERVICE);

        // Wifi 是否打开
        if (wifiManager.isWifiEnabled()) {
            // 检测已存在的wifi
            final List<WifiConfiguration> configs = wifiManager.getConfiguredNetworks();

            final String conferenceSSID = String.format("\"%s\"", Config.WIFI_SSID); // 自己设置的SSID

            for (WifiConfiguration config : configs) {
                if (conferenceSSID.equalsIgnoreCase(config.SSID))
                    return true;
            }
        }

        return WIFI_CONFIG_DONE.equals(getWiFiConfigStatus(context));
    }

    // 检测Wifi是否打开
    public static boolean isWiFiEnabled(final Context context) {
        final WifiManager wifiManager = (WifiManager)context.getSystemService(Context.WIFI_SERVICE);
        return wifiManager.isWifiEnabled();
    }

    // 检测自己设置的wifi是否已存在
    public static boolean isWiFiApConfigured(final Context context) {
        final WifiManager wifiManager = (WifiManager)context.getSystemService(Context.WIFI_SERVICE);
        final List<WifiConfiguration> configs = wifiManager.getConfiguredNetworks();

        if (configs == null)
            return false;

        // Check for existing APs.
        final String conferenceSSID = String.format("\"%s\"", Config.WIFI_SSID); // 自己设置的SSID

        for (WifiConfiguration config : configs) {
            if (conferenceSSID.equalsIgnoreCase(config.SSID))
                return true;
        }
        return false;
    }

    // 从sharedPreference 中获取Wfi状态
    public static String getWiFiConfigStatus(final Context context) {
        final SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(context);
        return sp.getString(PREF_WIFI_AP_CONFIG, null);
    }

    // 设置Wifi状态
    public static void setWiFiConfigStatus(final Context context, final String status) {

        if (!WIFI_CONFIG_DONE.equals(status) && !WIFI_CONFIG_REQUESTED.equals(status)) {
            throw new IllegalArgumentException("Invalid WiFi Config status: " + status);
        }
        final SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(context);
        sp.edit().putString(PREF_WIFI_AP_CONFIG, status).commit();
    }

    public static boolean installWiFiIfRequested(final Context context) {
        if (WIFI_CONFIG_REQUESTED.equals(getWiFiConfigStatus(context)) && isWiFiEnabled(context)) {
            installConferenceWiFi(context);
            if (isWiFiApConfigured(context)) {
                setWiFiConfigStatus(context, WiFiUtils.WIFI_CONFIG_DONE);
                return true;
            }
        }
        return false;
    }

    // 显示一个Wifi对话框 (在这个应用中好像不传Context更倾向于传递Activity)
    public static void showWiFiDialog(Activity activity) {
        FragmentManager fm = activity.getFragmentManager();
        FragmentTransaction ft = fm.beginTransaction();
        Fragment prev = fm.findFragmentByTag("dialog_wifi");
        if (prev != null) {
            ft.remove(prev);
        }
        ft.addToBackStack(null);
        new WiFiDialog(isWiFiEnabled(activity)).show(ft, "dialog_wifi");
    }

    // 自定义DialogFragment
    public static class WiFiDialog extends DialogFragment {

        private boolean mWiFiEnabled; // Wifi是否打开

        // 构造方法
        public WiFiDialog() {}

        // 构造方法
        public WiFiDialog(boolean wifiEnabled) {
            super();
            mWiFiEnabled = wifiEnabled;
        }

        @Override
        public Dialog onCreateDialog(Bundle savedInstanceState) {

            final int padding = getResources().getDimensionPixelSize(R.dimen.content_padding_normal);

            final TextView wifiTextView = new TextView(getActivity());

            int dialogCallToActionText;
            int dialogPositiveButtonText;

            if (mWiFiEnabled) {
                dialogCallToActionText = R.string.calltoaction_wifi_configure; // 点选“新增Wi-Fi网络”以继续
                dialogPositiveButtonText = R.string.wifi_dialog_button_configure; // 新增WiFi网络
            } else {
                dialogCallToActionText = R.string.calltoaction_wifi_settings; // 点击\'打开Wi-Fi设置“以启用Wi-Fi。
                dialogPositiveButtonText = R.string.wifi_dialog_button_settings; // 开启WiFi设置
            }
            wifiTextView.setText(Html.fromHtml(getString(R.string.description_setup_wifi_body)
                    + getString(dialogCallToActionText)));
            wifiTextView.setMovementMethod(LinkMovementMethod.getInstance());
            wifiTextView.setPadding(padding, padding, padding, padding);
            final Context context = getActivity();

            return new AlertDialog.Builder(context).setTitle(R.string.description_configure_wifi).setView(wifiTextView)
                    .setPositiveButton(dialogPositiveButtonText, new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int whichButton) {
                            // Attempt to configure the Wi-Fi access point.
                            if (mWiFiEnabled) {
                                installConferenceWiFi(context);
                                if (WiFiUtils.isWiFiApConfigured(context)) {
                                    WiFiUtils.setWiFiConfigStatus(context, WiFiUtils.WIFI_CONFIG_DONE);
                                }
                                // Launch Wi-Fi settings screen for user to enable Wi-Fi.
                            } else {
                                WiFiUtils.setWiFiConfigStatus(context, WiFiUtils.WIFI_CONFIG_REQUESTED);
                                final Intent wifiIntent = new Intent(Settings.ACTION_WIFI_SETTINGS);
                                wifiIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);
                                startActivity(wifiIntent);
                            }
                            dialog.dismiss();
                        }
                    }).create();
        }
    }

    /**
     * Returns whether we should or should not offer to set up wifi. If asCard == true this will decide whether or not
     * to offer wifi setup actively (as a card, for instance). If asCard == false, this will return whether or not to
     * offer wifi setup passively (in the overflow menu, for instance).
     */
    public static boolean shouldOfferToSetupWifi(final Context context, boolean actively) {
        long now = UIUtils.getCurrentTime(context);
        if (now < Config.WIFI_SETUP_OFFER_START) {
            // too early to offer
            return false;
        }
        if (now > Config.CONFERENCE_END_MILLIS) {
            // too late
            return false;
        }
        if (!WiFiUtils.isWiFiEnabled(context)) {
            // no wifi, no offer
            return false;
        }
        if (!PrefUtils.isAttendeeAtVenue(context)) {
            // wifi setup not relevant
            return false;
        }
        if (WiFiUtils.isWiFiApConfigured(context)) {
            // already set up
            return false;
        }
        if (actively && PrefUtils.hasDeclinedWifiSetup(context)) {
            // user said no
            return false;
        }
        return true;
    }
}
